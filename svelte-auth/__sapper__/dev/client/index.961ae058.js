import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, o as onMount, a as authenticated, e as empty, b as insert_dev, n as noop, c as detach_dev, t as text, f as claim_text, g as set_data_dev } from './client.97c95fd1.js';

/* src/routes/index.svelte generated by Svelte v3.35.0 */

// (27:0) {:else}
function create_else_block(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*message*/ ctx[0]);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, /*message*/ ctx[0]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*message*/ 1) set_data_dev(t, /*message*/ ctx[0]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(27:0) {:else}",
		ctx
	});

	return block;
}

// (25:0) {#if message === "undefined"}
function create_if_block(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("login failed");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "login failed");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(25:0) {#if message === \\\"undefined\\\"}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*message*/ ctx[0] === "undefined") return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Routes", slots, []);
	let message = "undefined";

	onMount(async () => {
		try {
			const response = await fetch("http://localhost:8080/api/v1/user", {
				headers: { "Content-Type": "application/json" },
				credentials: "include"
			});

			const content = await response.json();
			$$invalidate(0, message = `hey ${content.name}`);
			authenticated.set(true);
		} catch(e) {
			$$invalidate(0, message = "you are not logged in");
			authenticated.set(false);
		}
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ onMount, authenticated, message });

	$$self.$inject_state = $$props => {
		if ("message" in $$props) $$invalidate(0, message = $$props.message);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [message];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguOTYxYWUwNTguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tIFwic3ZlbHRlXCI7XG4gIGltcG9ydCB7IGF1dGhlbnRpY2F0ZWQgfSBmcm9tIFwiLi4vc3RvcmVzL2F1dGhcIjtcblxuICBsZXQgbWVzc2FnZSA9IFwidW5kZWZpbmVkXCI7XG5cbiAgb25Nb3VudChhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXCJodHRwOi8vbG9jYWxob3N0OjgwODAvYXBpL3YxL3VzZXJcIiwge1xuICAgICAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG4gICAgICAgIGNyZWRlbnRpYWxzOiBcImluY2x1ZGVcIixcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG4gICAgICBtZXNzYWdlID0gYGhleSAke2NvbnRlbnQubmFtZX1gO1xuICAgICAgYXV0aGVudGljYXRlZC5zZXQodHJ1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgbWVzc2FnZSA9IFwieW91IGFyZSBub3QgbG9nZ2VkIGluXCI7XG4gICAgICBhdXRoZW50aWNhdGVkLnNldChmYWxzZSk7XG4gICAgfVxuICB9KTtcbjwvc2NyaXB0PlxuXG57I2lmIG1lc3NhZ2UgPT09IFwidW5kZWZpbmVkXCJ9XG4gIGxvZ2luIGZhaWxlZFxuezplbHNlfVxuICB7bWVzc2FnZX1cbnsvaWZ9XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozt3QkEyQkcsR0FBTzs7O3FDQUFQLEdBQU87Ozs7OzswREFBUCxHQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrQkFITCxHQUFPLFFBQUssV0FBVzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQXBCdEIsT0FBTyxHQUFHLFdBQVc7O0NBRXpCLE9BQU87O1NBRUcsUUFBUSxTQUFTLEtBQUssQ0FBQyxtQ0FBbUM7SUFDOUQsT0FBTyxJQUFJLGNBQWMsRUFBRSxrQkFBa0I7SUFDN0MsV0FBVyxFQUFFLFNBQVM7OztTQUdsQixPQUFPLFNBQVMsUUFBUSxDQUFDLElBQUk7bUJBRW5DLE9BQU8sVUFBVSxPQUFPLENBQUMsSUFBSTtHQUM3QixhQUFhLENBQUMsR0FBRyxDQUFDLElBQUk7VUFDZixDQUFDO21CQUNSLE9BQU8sR0FBRyx1QkFBdUI7R0FDakMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
